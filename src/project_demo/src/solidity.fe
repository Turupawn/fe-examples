use ingot::evm
use ingot::map

pub struct Keccak256 {
    pub slot: u256
}

impl map::Hasher for Keccak256 {
    fn hash<T: map::Encode>(mut self, key: T) -> u256 {
        let allocated_buffer = evm::malloc(len: 32 + T::encode_size())
        let mut key_cursor = map::Cursor {
            inner: map::MemBuffer {
                ptr: allocated_buffer.offset,
                len: allocated_buffer.len.upcast()
            },
            pos: 0
        }

        self.slot.encode(key_cursor)
        key.encode(key_cursor)

        let buf = evm::Buf { offset: allocated_buffer.offset, len: allocated_buffer.len }
        let result: u256 = evm::__keccak256(args: buf)
        result
    }
}

pub struct SolidityHashMapStorage<T, U> {}

impl<T, U> map::HashMapStorage<T, U> for SolidityHashMapStorage<T, U> 
    where T: map::Encode, U: map::Encode, U: map::Decode
{
    fn get(mut self, _: T) -> U {
        let allocated_storage = evm::salloc(len: U::encode_size())
        let value_cursor = map::Cursor {
            inner: map::StorageBuffer { ptr: allocated_storage, len: U::encode_size().upcast() },
            pos: 0
        }
        U::decode(r: value_cursor)
    }

    fn set(mut self, _: T, _ value: U) -> bool {
        let allocated_storage = evm::salloc(len: U::encode_size())
        let value_cursor = map::Cursor {
            inner: map::StorageBuffer { ptr: allocated_storage, len: U::encode_size().upcast() },
            pos: 0
        }
        value.encode(value_cursor)
    }
}

pub type Mapping<T, U> = map::Map<T, U, Keccak256, SolidityHashMapStorage<T, U>>

impl<T, U> Mapping<T, U> 
    where T: map::Encode, U: map::Encode, U: map::Decode 
{
    pub fn new(mut self, slot: u256) {
        self.hasher.slot = slot
    }
}