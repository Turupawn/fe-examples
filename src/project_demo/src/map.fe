use ingot::evm
use test::Hasher
use ingot::std::codec::{Buffer, BufferResult, Cursor, Read, Write, Encode, Decode}

pub trait HashMapStorage<T, U> {
    fn get(mut self, key: T) -> U
    fn set(mut self, key: T, value: U) -> bool
    fn entry(mut self, key: T) -> Entry<T, U, Self>
    fn hash<V: Encode>(mut self, key: V) -> u256
    fn handle_vacant(self) -> U
}

pub struct Map<T, U, S: HashMapStorage<T, U>> {
    pub storage: S
}

impl<T, U, S: HashMapStorage<T, U>> Map<T, U, S>
    where T: Encode, U: Encode, U: Decode
{
    pub fn get(mut self, key: T) -> U {
        self.storage.get(key)
    }

    pub fn set(mut self, key: T, value: U) -> bool {
        self.storage.set(key, value)
    }

    pub fn entry(mut self, key: T) -> Entry<T, U, S> {
        self.storage.entry(key)
    }
}

// Entry

pub enum Entry<T, U, S: HashMapStorage<T, U>> {
    Occupied { pub key: T, pub value: U, pub index: u256, pub storage: S },
    Vacant { pub key: T, pub storage: S }
}

impl<T, U, S: HashMapStorage<T, U>> Entry<T, U, S> {
    pub fn or_insert(mut self, value: U) -> U {
        match self {
            Entry::Occupied { value: v, .. } => v
            Entry::Vacant { key, mut storage } => {
                storage.set(key, value)
                value
            }
        }
    }

    pub fn value(self) -> U {
        match self {
            Entry::Occupied { value, .. } => value
            Entry::Vacant { storage, .. } => storage.handle_vacant()
        }
    }
}

pub trait Add {
    fn add(self, other: Self) -> Self
}

pub trait Sub {
    fn sub(self, other: Self) -> Self
}

pub trait AddAssign<V> {
    fn add_assign(mut self, other: V)
}

impl<K, V, S> AddAssign<V> for Entry<K, V, S>
    where 
        S: HashMapStorage<K, V>,
        V: Add
{
    fn add_assign(mut self, other: V) {
        match self {
            Entry::Occupied { key, value, index, mut storage } => {
                let new_value = value.add(other: other)
                storage.set(key: key, value: new_value)
                self = Entry::Occupied { key, value: new_value, index, storage }
            }
            Entry::Vacant { key, storage } => {
                self = Entry::Vacant { key, storage }
            }
        }
    }
}

pub trait SubAssign<V> {
    fn sub_assign(mut self, other: V)
}

impl<K, V, S> SubAssign<V> for Entry<K, V, S>
    where 
        S: HashMapStorage<K, V>,
        V: Sub
{
    fn sub_assign(mut self, other: V) {
        match self {
            Entry::Occupied { key, value, index, mut storage } => {
                let new_value = value.sub(other: other)
                storage.set(key: key, value: new_value)
                self = Entry::Occupied { key, value: new_value, index, storage }
            }
            Entry::Vacant { key, storage } => {
                self = Entry::Vacant { key, storage }
            }
        }
    }
}

impl Add for u256 {
    fn add(self, other: u256) -> u256 {
        self + other
    }
}

impl Sub for u256 {
    fn sub(self, other: u256) -> u256 {
        self - other
    }
}