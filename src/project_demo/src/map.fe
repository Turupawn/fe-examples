use ingot::evm

pub trait Hasher {
    fn hash<T: Encode>(mut self, key: T) -> u256
}

// BUFFER

pub struct BufferResult<T> {
    pub value: T,
    pub is_error: bool
}

trait Buffer {
    fn write_word(mut self, offset: u256, w: u256) -> bool
    fn read_word(mut self, offset: u256) -> BufferResult<u256>
    fn len(self) -> u256
}

// MEMORY BUFFER

pub struct MemBuffer { pub ptr: evm::Ptr, pub len: u256 }

impl Buffer for MemBuffer {
    fn write_word(mut self, offset: u256, w: u256) -> bool {
        if offset >= self.len {
            return false
        }
        evm::__mstore(self.ptr.location.upcast() + offset, w)
        true
    }
    fn read_word(mut self, offset: u256) -> BufferResult<u256> {
        if offset >= self.len {
            return BufferResult { value: 0, is_error: true }
        }
        let value = evm::__mload(self.ptr.location.upcast() + offset)
        BufferResult { value: value, is_error: false }
    }

    fn len(self) -> u256 {
        self.len
    }
}

// STORAGE BUFFER

pub struct StorageBuffer { pub ptr: evm::Ptr, pub len: u256 }

impl Buffer for StorageBuffer {
    fn write_word(mut self, offset: u256, w: u256) -> bool {
        evm::__sstore(offset, w)
        true
    }
    fn read_word(mut self, offset: u256) -> BufferResult<u256> {
        let value = evm::__sload(offset)
        BufferResult { value: value, is_error: false }
    }

    fn len(self) -> u256 {
        self.len
    }
}

// CURSOR

pub struct Cursor<B: Buffer> {
    pub inner: B,
    pub pos: u256
}

impl<B: Buffer> Write for Cursor<B> {
    fn write_word(mut self, w: u256) -> bool {
        if self.pos > self.inner.len() {
            return false
        }
        self.inner.write_word(offset: self.pos, w)
        self.pos += 32
        true
    }
}

impl<B: Buffer> Read for Cursor<B> {
    fn read_word(mut self) -> BufferResult<u256> {
        if self.pos > self.inner.len() {
            return BufferResult { value: 0, is_error: true }
        }
        let word: u256 = self.inner.read_word(offset: self.pos).value
        self.pos += 32
        BufferResult { value: word, is_error: false }
    }
}

// WRITE

trait Write {
    fn write_word(mut self, w: u256) -> bool
}

impl Write for MemBuffer {
    fn write_word(mut self, w: u256) -> bool {
        Buffer::write_word(self, offset: self.ptr.location.upcast(), w)
    }
}

impl Write for StorageBuffer {
    fn write_word(mut self, w: u256) -> bool {
        Buffer::write_word(self, offset: 0, w)
    }
}

trait Read {
    fn read_word(mut self) -> BufferResult<u256>
}

impl Read for MemBuffer {
    fn read_word(mut self) -> BufferResult<u256> {
        Buffer::read_word(self, offset: 0)
    }
}

impl Read for StorageBuffer {
    fn read_word(mut self) -> BufferResult<u256> {
        Buffer::read_word(self, offset: 0)
    }
}


// ENCODE AND DECODE

pub trait Decode {
    fn decode<R: Read>(mut r: R) -> BufferResult<Self>
    fn decode_size() -> usize
}

pub trait Encode {
    fn encode<W: Write>(self, mut _ w: W) -> bool
    fn encode_size() -> usize
}

impl Decode for u256 {
    fn decode<R: Read>(mut r: R) -> BufferResult<u256> {
        r.read_word()
    }
    fn decode_size() -> usize {
        32
    }
}

impl Encode for u256 {
    fn encode<W: Write>(self, mut _ w: W) -> bool {
        w.write_word(w: self)
    }

    fn encode_size() -> usize {
        32
    }
}

impl Encode for (u256, u256) {
    fn encode<W: Write>(self, mut _ w: W) -> bool {
        let (a, b) = self
        if !a.encode(w) {
            return false
        }
        b.encode(w)
    }

    fn encode_size() -> usize {
        64  // 2 * 32 bytes (size of two u256)
    }
}

impl Decode for (u256, u256) {
    fn decode<R: Read>(mut r: R) -> BufferResult<(u256, u256)> {
        let a = u256::decode(r)
        if a.is_error {
            return BufferResult { value: (0, 0), is_error: true }
        }
        let b = u256::decode(r)
        if b.is_error {
            return BufferResult { value: (0, 0), is_error: true }
        }
        BufferResult { value: (a.value, b.value), is_error: false }
    }

    fn decode_size() -> usize {
        64  // 2 * 32 bytes (size of two u256)
    }
}

pub trait HashMapStorage<T, U> {
    fn get(mut self, key: T) -> U
    fn set(mut self, key: T, value: U) -> bool
    fn entry(mut self, key: T) -> Entry<T, U, Self>
    fn hash<V: Encode>(mut self, key: V) -> u256
    fn handle_vacant(self) -> U
}

pub struct Map<T, U, S: HashMapStorage<T, U>> {
    pub storage: S
}

impl<T, U, S: HashMapStorage<T, U>> Map<T, U, S>
    where T: Encode, U: Encode, U: Decode
{
    pub fn get(mut self, key: T) -> U {
        self.storage.get(key)
    }

    pub fn set(mut self, key: T, value: U) -> bool {
        self.storage.set(key, value)
    }

    pub fn entry(mut self, key: T) -> Entry<T, U, S> {
        self.storage.entry(key)
    }
}

// Entry

pub enum Entry<T, U, S: HashMapStorage<T, U>> {
    Occupied { pub key: T, pub value: U, pub index: u256, pub storage: S },
    Vacant { pub key: T, pub storage: S }
}

impl<T, U, S: HashMapStorage<T, U>> Entry<T, U, S> {
    pub fn or_insert(mut self, value: U) -> U {
        match self {
            Entry::Occupied { value: v, .. } => v
            Entry::Vacant { key, mut storage } => {
                storage.set(key, value)
                value
            }
        }
    }

    pub fn value(self) -> U {
        match self {
            Entry::Occupied { value, .. } => value
            Entry::Vacant { storage, .. } => storage.handle_vacant()
        }
    }
}

pub trait Add {
    fn add(self, other: Self) -> Self
}

pub trait Sub {
    fn sub(self, other: Self) -> Self
}

pub trait AddAssign<V> {
    fn add_assign(mut self, other: V)
}

impl<K, V, S> AddAssign<V> for Entry<K, V, S>
    where 
        S: HashMapStorage<K, V>,
        V: Add
{
    fn add_assign(mut self, other: V) {
        match self {
            Entry::Occupied { key, value, index, mut storage } => {
                let new_value = value.add(other: other)
                storage.set(key: key, value: new_value)
                self = Entry::Occupied { key, value: new_value, index, storage }
            }
            Entry::Vacant { key, storage } => {
                self = Entry::Vacant { key, storage }
            }
        }
    }
}

pub trait SubAssign<V> {
    fn sub_assign(mut self, other: V)
}

impl<K, V, S> SubAssign<V> for Entry<K, V, S>
    where 
        S: HashMapStorage<K, V>,
        V: Sub
{
    fn sub_assign(mut self, other: V) {
        match self {
            Entry::Occupied { key, value, index, mut storage } => {
                let new_value = value.sub(other: other)
                storage.set(key: key, value: new_value)
                self = Entry::Occupied { key, value: new_value, index, storage }
            }
            Entry::Vacant { key, storage } => {
                self = Entry::Vacant { key, storage }
            }
        }
    }
}

impl Add for u256 {
    fn add(self, other: u256) -> u256 {
        self + other
    }
}

impl Sub for u256 {
    fn sub(self, other: u256) -> u256 {
        self - other
    }
}